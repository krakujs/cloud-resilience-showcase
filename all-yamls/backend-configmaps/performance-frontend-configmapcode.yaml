apiVersion: v1
kind: ConfigMap
metadata:
  name: performance-frontend-code
  namespace: performance
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Performance Metrics Hub</title>
      <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
      <script src="https://cdn.jsdelivr.net/npm/vue@3.2.45/dist/vue.global.js"></script>
      <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
      <style>
        .card {
          margin-bottom: 20px;
          box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .metric-value {
          font-size: 24px;
          font-weight: bold;
        }
        .metric-label {
          font-size: 14px;
          color: #6c757d;
        }
        .healthy {
          color: #28a745;
        }
        .warning {
          color: #ffc107;
        }
        .critical {
          color: #dc3545;
        }
      </style>
    </head>
    <body>
      <div id="app" class="container-fluid py-4">
        <div class="row mb-4">
          <div class="col-12">
            <h1>Performance Metrics Hub</h1>
            <p class="text-muted">Cloud Resilience Simulator monitoring dashboard</p>
          </div>
        </div>

        <div class="row mb-4">
          <div class="col-md-3">
            <div class="card">
              <div class="card-body text-center">
                <div class="metric-label">CPU Usage</div>
                <div class="metric-value" :class="getHealthClass(clusterMetrics.cpu.usage)">
                  {{ Math.round(clusterMetrics.cpu.usage) }}%
                </div>
                <div class="progress mt-2">
                  <div class="progress-bar" role="progressbar" :style="{width: clusterMetrics.cpu.usage + '%'}" 
                    :class="getProgressClass(clusterMetrics.cpu.usage)"></div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="card">
              <div class="card-body text-center">
                <div class="metric-label">Memory Usage</div>
                <div class="metric-value" :class="getHealthClass(clusterMetrics.memory.usage)">
                  {{ Math.round(clusterMetrics.memory.usage) }}%
                </div>
                <div class="progress mt-2">
                  <div class="progress-bar" role="progressbar" :style="{width: clusterMetrics.memory.usage + '%'}" 
                    :class="getProgressClass(clusterMetrics.memory.usage)"></div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="card">
              <div class="card-body text-center">
                <div class="metric-label">Storage Usage</div>
                <div class="metric-value" :class="getHealthClass(clusterMetrics.storage.usage)">
                  {{ Math.round(clusterMetrics.storage.usage) }}%
                </div>
                <div class="progress mt-2">
                  <div class="progress-bar" role="progressbar" :style="{width: clusterMetrics.storage.usage + '%'}" 
                    :class="getProgressClass(clusterMetrics.storage.usage)"></div>
                </div>
              </div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="card">
              <div class="card-body text-center">
                <div class="metric-label">Network Traffic</div>
                <div class="metric-value">
                  {{ Math.round(clusterMetrics.network.inbound + clusterMetrics.network.outbound) }} KB/s
                </div>
                <div class="small text-muted">
                  In: {{ Math.round(clusterMetrics.network.inbound) }} KB/s | 
                  Out: {{ Math.round(clusterMetrics.network.outbound) }} KB/s
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="row mb-4">
          <div class="col-lg-8">
            <div class="card">
              <div class="card-header">
                Cluster Resource Usage Over Time
              </div>
              <div class="card-body">
                <canvas id="resourceChart" height="250"></canvas>
              </div>
            </div>
          </div>
          <div class="col-lg-4">
            <div class="card">
              <div class="card-header d-flex justify-content-between align-items-center">
                <span>Load Test</span>
                <button class="btn btn-primary btn-sm" @click="startLoadTest">Run Load Test</button>
              </div>
              <div class="card-body">
                <div v-if="loadTestRunning" class="text-center p-3">
                  <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                  </div>
                  <p class="mt-2">Load test in progress...</p>
                </div>
                <div v-else>
                  <div class="mb-3">
                    <div class="metric-label">Success Rate</div>
                    <div class="metric-value">{{ loadTestResults.successRate }}%</div>
                  </div>
                  <div class="mb-3">
                    <div class="metric-label">Avg. Response Time</div>
                    <div class="metric-value">{{ loadTestResults.averageResponseTime }} ms</div>
                  </div>
                  <div class="mb-3">
                    <div class="metric-label">Throughput</div>
                    <div class="metric-value">{{ loadTestResults.throughput }} req/s</div>
                  </div>
                  <div class="mb-3">
                    <div class="metric-label">Last Test Run</div>
                    <div>{{ new Date(loadTestResults.timestamp).toLocaleString() }}</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="row">
          <div class="col-12">
            <div class="card">
              <div class="card-header">
                Microservices Health
              </div>
              <div class="card-body">
                <table class="table">
                  <thead>
                    <tr>
                      <th>Service</th>
                      <th>Status</th>
                      <th>CPU</th>
                      <th>Memory</th>
                      <th>Latency</th>
                      <th>Requests/min</th>
                      <th>Error Rate</th>
                    </tr>
                  </thead>
                  <tbody>
                    <tr v-for="service in serviceMetrics" :key="service.name">
                      <td>{{ service.name }}</td>
                      <td>
                        <span class="badge" :class="getStatusClass(service.status)">{{ service.status }}</span>
                      </td>
                      <td>{{ Math.round(service.cpu) }}%</td>
                      <td>{{ Math.round(service.memory) }}%</td>
                      <td>{{ Math.round(service.latency) }} ms</td>
                      <td>{{ service.requests }}</td>
                      <td>{{ service.errorRate.toFixed(2) }}%</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
      </div>

      <script>
        const { createApp } = Vue;
        
        createApp({
          data() {
            return {
              clusterMetrics: {
                cpu: { usage: 0, capacity: 100, trend: [] },
                memory: { usage: 0, capacity: 100, trend: [] },
                storage: { usage: 0, capacity: 100, trend: [] },
                network: { inbound: 0, outbound: 0, trend: [] }
              },
              serviceMetrics: [],
              loadTestResults: {
                timestamp: new Date().toISOString(),
                successRate: 0,
                averageResponseTime: 0,
                throughput: 0
              },
              loadTestRunning: false,
              charts: {}
            };
          },
          mounted() {
            this.fetchData();
            
            // Initialize charts
            this.initCharts();
            
            // Set up polling
            setInterval(this.fetchData, 30000);
          },
          methods: {
            async fetchData() {
              try {
                // Fetch cluster metrics
                const clusterResponse = await fetch('/api/cluster/metrics');
                this.clusterMetrics = await clusterResponse.json();
                
                // Fetch service metrics
                const servicesResponse = await fetch('/api/services/metrics');
                this.serviceMetrics = await servicesResponse.json();
                
                // Fetch load test results
                const loadTestResponse = await fetch('/api/loadtest/results');
                this.loadTestResults = await loadTestResponse.json();
                
                // Update charts
                this.updateCharts();
              } catch (error) {
                console.error('Error fetching data:', error);
              }
            },
            initCharts() {
              const ctx = document.getElementById('resourceChart').getContext('2d');
              
              this.charts.resourceChart = new Chart(ctx, {
                type: 'line',
                data: {
                  labels: Array.from({ length: 24 }, (_, i) => `${23-i}h ago`).reverse(),
                  datasets: [
                    {
                      label: 'CPU',
                      data: this.clusterMetrics.cpu.trend,
                      borderColor: 'rgba(255, 99, 132, 1)',
                      backgroundColor: 'rgba(255, 99, 132, 0.1)',
                      borderWidth: 2,
                      fill: true,
                      tension: 0.4
                    },
                    {
                      label: 'Memory',
                      data: this.clusterMetrics.memory.trend,
                      borderColor: 'rgba(54, 162, 235, 1)',
                      backgroundColor: 'rgba(54, 162, 235, 0.1)',
                      borderWidth: 2,
                      fill: true,
                      tension: 0.4
                    },
                    {
                      label: 'Storage',
                      data: this.clusterMetrics.storage.trend,
                      borderColor: 'rgba(255, 206, 86, 1)',
                      backgroundColor: 'rgba(255, 206, 86, 0.1)',
                      borderWidth: 2,
                      fill: true,
                      tension: 0.4
                    }
                  ]
                },
                options: {
                  responsive: true,
                  maintainAspectRatio: false,
                  plugins: {
                    legend: {
                      position: 'top',
                    }
                  },
                  scales: {
                    y: {
                      beginAtZero: true,
                      max: 100,
                      title: {
                        display: true,
                        text: 'Usage (%)'
                      }
                    }
                  }
                }
              });
            },
            updateCharts() {
              if (this.charts.resourceChart) {
                this.charts.resourceChart.data.datasets[0].data = this.clusterMetrics.cpu.trend;
                this.charts.resourceChart.data.datasets[1].data = this.clusterMetrics.memory.trend;
                this.charts.resourceChart.data.datasets[2].data = this.clusterMetrics.storage.trend;
                this.charts.resourceChart.update();
              }
            },
            getHealthClass(value) {
              if (value < 70) return 'healthy';
              if (value < 90) return 'warning';
              return 'critical';
            },
            getProgressClass(value) {
              if (value < 70) return 'bg-success';
              if (value < 90) return 'bg-warning';
              return 'bg-danger';
            },
            getStatusClass(status) {
              if (status === 'Healthy') return 'bg-success';
              if (status === 'Warning') return 'bg-warning';
              return 'bg-danger';
            },
            async startLoadTest() {
              this.loadTestRunning = true;
              
              try {
                const response = await fetch('/api/loadtest/start', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  }
                });
                
                const result = await response.json();
                console.log('Load test started:', result);
                
                // Simulate load test completion after 5 seconds
                setTimeout(() => {
                  this.loadTestRunning = false;
                  this.fetchData();
                }, 5000);
              } catch (error) {
                console.error('Error starting load test:', error);
                this.loadTestRunning = false;
              }
            }
          }
        }).mount('#app');
      </script>
    </body>
    </html>