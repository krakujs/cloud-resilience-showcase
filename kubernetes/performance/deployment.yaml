apiVersion: apps/v1
kind: Deployment
metadata:
  name: performance-backend
  namespace: performance
spec:
  replicas: 1
  selector:
    matchLabels:
      app: performance-backend
  template:
    metadata:
      labels:
        app: performance-backend
    spec:
      containers:
      - name: performance-backend
        image: node:18-alpine
        command: ["/bin/sh", "-c"]
        args: ["cd /app && npm init -y && npm install express cors morgan axios prom-client && node /app/server.js"]
        volumeMounts:
        - name: backend-code
          mountPath: "/app/server.js"
          subPath: "server.js"
        ports:
        - containerPort: 3000
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 20
          periodSeconds: 15
      volumes:
      - name: backend-code
        configMap:
          name: performance-backend-code
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: performance-frontend
  namespace: performance
spec:
  replicas: 1
  selector:
    matchLabels:
      app: performance-frontend
  template:
    metadata:
      labels:
        app: performance-frontend
    spec:
      containers:
      - name: performance-frontend
        image: nginx:alpine
        volumeMounts:
        - name: frontend-code
          mountPath: "/usr/share/nginx/html/index.html"
          subPath: "index.html"
        - name: nginx-config
          mountPath: "/etc/nginx/conf.d/default.conf"
          subPath: "nginx.conf"
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: frontend-code
        configMap:
          name: performance-frontend-code
      - name: nginx-config
        configMap:
          name: performance-nginx-config
---
apiVersion: v1
kind: Service
metadata:
  name: performance-backend
  namespace: performance
spec:
  selector:
    app: performance-backend
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: performance-frontend
  namespace: performance
spec:
  selector:
    app: performance-frontend
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: performance-ingress
  namespace: performance
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
  - http:
      paths:
      - path: /performance
        pathType: Prefix
        backend:
          service:
            name: performance-frontend
            port:
              number: 80
